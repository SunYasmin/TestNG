//TestNG de PAGE OBJECT MODEL VARDİR. Page classimiz olacak ve istedigimiz her locate i
    // bir kere locate edip atacagiz(istedigimiz her locate alani) donup donup onu kullanacagiz
    //1 kere olustur heryerden kullan
    //Pencere nerde acilsin nerde kapansin ... bunlarin hepsine biz karar verecegiz
    //test classlari-page class-driver classi-raporlama classimiz olacak hepsi ayri ayri
    //en gelismis ve cok kullanilan model POM: Page Object Model
    //extends yapabilcegim bir class secenegi varken
    // daha cok classtan faydalanabilmek icin obje olusturarak
    // istedigim her classtan her variable veya methodu kullanabilirim

************POM BİR DESİGN PATTERN DİR**************

POM'da artik inheritance yerine object ve static kullanarak methodlara ulasiyoruz
page classina objeyle
driver classina static ile ulasiriz

Public olarak tanımlanan öğeye kod bloğunun içinden ve dışından erişebilir, yani her yerden ulaşılabilir denilebilir.
Static tanımlaması yapıldığında ise bu sınıfa herhangi bir nesne oluşturmadan, sadece adıyla çağırıp erişim sağlanabilir.

NEDEN POM
Özetle;
1- Tekrarlardan kurtuluruz
2- Daha az kod daha çok iş
3- Kolayca update yapabilme


PageFactory bizlere nesne deposu oluşturmaya imkan veren, sürdürülebilir,
yeniden kullanılabilir ve elementleri tek bir yerden yönetmeyi sağlayan bir Page object model konseptidir.

Page Factory’i kullanımına bakacak olursak PageFactory model, Web elementlerini
@FindBy annotionu ile algılar. How kalıbı ile birlikte elementlerin ayırt edici
locator’ından hangisini kullanacaksak belirtilir. Sonrasında ise o ayırt edici
locator’ın adı tanımlanır. Public WebElement ile birlikte test senaryolarında
kullanmak üzere isimlendirmesi yaparız. Burada isimlendirme daha sonra baktığında
anlayabilmek için önemlidir, okunaklı olmalıdır.